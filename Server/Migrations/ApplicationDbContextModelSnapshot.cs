// <auto-generated />
using System;
using Artha.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Artha.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Artha.Shared.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<short>("RowStatus")
                        .HasColumnType("smallint");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Artha.Shared.Entities.Location", b =>
                {
                    b.Property<string>("LocationCode")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdjustmentBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<short>("AllowBreakbulk")
                        .HasColumnType("smallint");

                    b.Property<short>("AlwaysCreatePickLine")
                        .HasColumnType("smallint");

                    b.Property<short>("AlwaysCreatePutawayLine")
                        .HasColumnType("smallint");

                    b.Property<string>("BaseCalendarCode")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("BinCapacityPolicy")
                        .HasColumnType("int");

                    b.Property<short>("BinMandatory")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Contact")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrossDockBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CrossDockDueDateCalc")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("DefaultBinSelection")
                        .HasColumnType("int");

                    b.Property<short>("DirectedPutawayandPick")
                        .HasColumnType("smallint");

                    b.Property<string>("EMail")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("FaxNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("HomePage")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("InboundBOMBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InboundProductionBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InboundWhseHandlingTime")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LocationName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name2")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OpenShopFloorBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OutboundBOMBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OutboundProductionBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OutboundWhseHandlingTime")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNo2")
                        .HasColumnType("varchar(30)");

                    b.Property<short>("PickAccordingtoFEFO")
                        .HasColumnType("smallint");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PutawayTemplateCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ReceiptBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<short>("RequirePick")
                        .HasColumnType("smallint");

                    b.Property<short>("RequirePutaway")
                        .HasColumnType("smallint");

                    b.Property<short>("RequireReceive")
                        .HasColumnType("smallint");

                    b.Property<short>("RequireShipment")
                        .HasColumnType("smallint");

                    b.Property<short>("RowStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("ShipmentBinCode")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("SpecialEquipment")
                        .HasColumnType("int");

                    b.Property<short>("UseADCS")
                        .HasColumnType("smallint");

                    b.Property<short>("UseAsInTransit")
                        .HasColumnType("smallint");

                    b.Property<short>("UseCrossDocking")
                        .HasColumnType("smallint");

                    b.Property<short>("UsePutawayWorksheet")
                        .HasColumnType("smallint");

                    b.HasKey("LocationCode");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Artha.Shared.Entities.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActionAfterDiffWarning")
                        .HasColumnType("int");

                    b.Property<byte>("AddPrepmtAmtAllowed")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("Blocked")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CIDReportPrintingAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ChangePrepmtAmtAllowed")
                        .HasColumnType("tinyint");

                    b.Property<string>("City")
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("ContinueonTSerrors")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CreateCustomers")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerComments")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatetoBeBlocked")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("FloatingDeclAllowed")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("FraudSortField")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("HomePhoneNo")
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<byte>("InventoryActive")
                        .HasColumnType("tinyint");

                    b.Property<string>("InventoryMainMenu")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastZReport")
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("LeftHanded")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ManagerPrivileges")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("MaxDiscounttoGivePercent")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("MaxTenderDeclDifference")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("MaxTotalDiscountPercent")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("MaxWarningCount")
                        .HasColumnType("int");

                    b.Property<string>("NameonReceipt")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("No")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("NoLayoutSwitchingAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoPaymentAllowed")
                        .HasColumnType("tinyint");

                    b.Property<string>("NoSeries")
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("NoSplitBillAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoTableAdjustingAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoTableDesigningAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoTableTransferAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoVoidLineAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NoVoidOnlyItemCorr")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OpenDrawwithoutSale")
                        .HasColumnType("tinyint");

                    b.Property<string>("POSInterfaceProfile")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PayrollNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermissionGroup")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PriceOverride")
                        .HasColumnType("int");

                    b.Property<byte>("ReturninTransaction")
                        .HasColumnType("tinyint");

                    b.Property<short>("RowStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesPerson")
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("ShowDifferenceinWarning")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ShowTransAmount")
                        .HasColumnType("tinyint");

                    b.Property<string>("StoreNo")
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("TenderDeclAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TransSuspensAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TransVoidingAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UpdateCustomers")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ViewSaleshistory")
                        .HasColumnType("tinyint");

                    b.Property<byte>("VoidPrepaymentAllowed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("VoidPrepaymentLineAllowed")
                        .HasColumnType("tinyint");

                    b.Property<string>("WorkPhoneNo")
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("XReportPrintingAllowed")
                        .HasColumnType("tinyint");

                    b.HasKey("StaffID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "036bbfd4-1bfd-4975-afb6-fc77c17b3da5",
                            ConcurrencyStamp = "29b44c09-7dcb-4b46-ae73-95536b95e27f",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a7b4700a-afa1-4c8c-b05e-0ddc019c7a21",
                            ConcurrencyStamp = "a3b67a57-0715-4db9-87dc-5d392afefecb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
